@using DeaconCCGManagement.Helpers
@using DeaconCCGManagement.Models
@using DeaconCCGManagement.ViewModels
@model BulkContactViewModel

@{
    ViewBag.Title = "Contact Selected Members";

    if (ViewBag.Complete == null)
    {
        ViewBag.Complete = false;
    }
   
}

@section styles{
   @Styles.Render("~/Content/bootstrap-datetimepicker.min.css")
}

@Html.Partial("_Breadcrumbs", "Bulk Contact")


@if (ViewBag.Complete)
{
    <h2 class="alert alert-success">
        Your contact record has been saved
        for all the selected members.</h2>
}
else
{
    <h2>Bulk Contact</h2>
}





@if (@Model.NoMembersSelected)
{
    <h3>No Members Selected</h3>
     @Html.Partial("_BackToListLink")
    <br/>
}


<div id="bulk-contact-options">
    <p>
        <button class="btn btn-primary" type="button" data-toggle="collapse"
                data-target="#listMembers" id="btnShowHideMembers">
            <span id="btnIcon" class="glyphicon glyphicon-eye-open"></span>
            <span id="spanShowHideMembers">Show Selected Members</span>
        </button>
    </p>
    <div class="collapse" id="listMembers">
        <div class="well">
            <p>
                @{
                    if (Model?.Members != null)
                    {
                        int num = 1;
                        foreach (var item in Model.Members)
                        {
                            <label>@num. @item.MemberFullName</label>
                            <br />
                            num++;
                        }
                    }

                }
            </p>
        </div>
    </div>

    <br />

    <div class="well">
        <h4>Send A Bulk Email or Text Message</h4>

        @using (Html.BeginForm("BulkEmail", "BulkContact", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            @*Creates hidden field for each member's id*@
        for (int i = 0; i < Model.Members?.Count; i++)
        {
            @Html.HiddenFor(modelItem => modelItem.Members[i].MemberId)
            @Html.HiddenFor(modelItem => modelItem.Members[i].MemberFullName)
        }

        <p>
            <button class="btn btn-primary" type="submit">
                <span class="fa fa-envelope-o"></span> Bulk Email
            </button>
        </p>
        }

        @using (Html.BeginForm("BulkTextMessage", "BulkContact", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            @*Creates hidden field for each member's id*@
        for (int i = 0; i < Model.Members?.Count; i++)
        {
            @Html.HiddenFor(modelItem => modelItem.Members[i].MemberId)
            @Html.HiddenFor(modelItem => modelItem.Members[i].MemberFullName)
        }

        <p>
            <button class="btn btn-primary" type="submit">
                <span class="glyphicon glyphicon-phone"></span> Bulk Text Message
            </button>
        </p>
        }
    </div>

    <P>
        <span style="font-size: 2.0em; font-weight: bold">or</span>
    </P>

    @using (Html.BeginForm("Create", "BulkContact", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

     @*Creates hidden field for each member's id*@
    for (int i = 0; i < Model?.Members?.Count; i++)
    {
        @Html.HiddenFor(modelItem => modelItem.Members[i].MemberId)
        @Html.HiddenFor(modelItem => modelItem.Members[i].MemberFullName)
    }

    <div class="well well-md">
        <div class="form-horizontal">
            <h4>New Contact Record for <em>All</em> Selected Members</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.CreateContactVM.ContactDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3" style="padding: 0 0 0 15px">
                    <div class="input-group date datepicker">
                        @Html.EditorFor(model => model.CreateContactVM.ContactDate, new { htmlAttributes = new { @class = "form-control dateMask" } })
                        <span class="input-group-addon addOn">
                            <button class="btn btn-default calendar" type="button">
                                <span class="fa fa-calendar"></span>
                            </button>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.CreateContactVM.ContactDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreateContactVM.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CreateContactVM.Subject, new { htmlAttributes = new { @class = "form-control", id = "subject" } })
                    @Html.ValidationMessageFor(model => model.CreateContactVM.Subject, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreateContactVM.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CreateContactVM.Comments, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CreateContactVM.Comments, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreateContactVM.ContactTypes, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @if (Model.ContactTypes != null)
                    {
                        @Html.DropDownListFor(model => model.ContactTypeId, Model.ContactTypes, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CreateContactVM.ContactTypes, "", new { @class = "text-danger" })
                    }
                    
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    </div>
    }
</div>



@section Scripts{

    @Scripts.Render("~/Scripts/moment.min.js")
    @Scripts.Render("~/Scripts/bootstrap-datetimepicker.min.js")
    @Scripts.Render("~/Scripts/App/DatePicker.js")
    @Scripts.Render("~/Scripts/jquery.maskedinput.js")
    @Scripts.Render("~/Scripts/App/DateMask.js")
    @Scripts.Render("~/Scripts/App/GetBackToListUrl.js")

    <script type="text/javascript">
        $(function () {
            $("#subject").focus();
        });
    </script>

    <script type="text/javascript">
        $(function () {

            var noMembersSelected = "@Model.NoMembersSelected";

            // Hide bulk contact options if no members selected
            if (noMembersSelected === "True") {
                $("#bulk-contact-options").hide();
            }

            // When the collapsible element is shown,
            // change the button's text to 'Hide Selected Members'
            $('#listMembers').on('show.bs.collapse', function () {
                $('#spanShowHideMembers').text('Hide Selected Members');

                // Toggle icon
                $('#btnIcon').removeClass('glyphicon glyphicon-eye-open');
                $('#btnIcon').addClass('glyphicon glyphicon-eye-close');
            });
            // When the collapsible element is collpased,
            // change the button's text to 'Show Selected Members'
            $('#listMembers').on('hide.bs.collapse', function () {
                $('#spanShowHideMembers').text('Show Selected Members');

                // Toggle icon
                $('#btnIcon').removeClass('glyphicon glyphicon-eye-close');
                $('#btnIcon').addClass('glyphicon glyphicon-eye-open');
            });
        });
    </script>
}