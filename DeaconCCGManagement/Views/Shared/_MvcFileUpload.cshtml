@using System.Globalization
@using DeaconCCGManagement.Models
@using MvcFileUploader.Models
@model MvcFileUploader.Models.FileUploadViewModel
@{
    var formId = "fileupload" + Guid.NewGuid();

    var maxNoOfFiles = Model.MaxNumberOfFiles.HasValue ? Model.MaxNumberOfFiles.Value.ToString(CultureInfo.InvariantCulture) : "undefined";
}


<!-- file upload dialog/inline form-->

<form id="@formId" action="@Model.UploadUrl" method="POST" enctype="multipart/form-data">
    <div class="row fileupload-buttonbar">
        <div class="col-lg-7">
            <!-- The fileinput-button span is used to style the file input field as button -->
            <span class="btn btn-success fileinput-button">
                <i class="glyphicon glyphicon-plus"></i>
                <span>Select file...</span>
                @if (Model.MaxNumberOfFiles == 1)
                {
                    <input type="file" name="files[]" />
                }
                else
                {
                    <input type="file" name="files[]" multiple />
                }
            </span>
            @*<button type="submit" class="btn btn-primary start">
                <i class="glyphicon glyphicon-upload"></i>
                <span>Start upload</span>
            </button>
            <button type="reset" class="btn btn-warning cancel">
                <i class="glyphicon glyphicon-ban-circle"></i>
                <span>Cancel upload</span>
            </button>*@
            <button type="button" class="btn btn-danger openDialog">
                <i class="glyphicon glyphicon-trash"></i>
                <span>Delete</span>
            </button>

            <button id="reload" type="button" class="btn btn-primary">
                <i class="glyphicon glyphicon-refresh"></i>
                <span>Refresh</span>
            </button>
            @*<input type="checkbox" class="toggle">*@
        </div>

        <!-- The global file processing state -->
        <span class="fileupload-process"></span>
        <!-- The global progress state -->
        <div class="col-lg-5 fileupload-progress fade">
            <!-- The global progress bar -->
            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                <div class="progress-bar progress-bar-success" style="width: 0%;"></div>
            </div>
            <!-- The extended global progress state -->
            <div class="progress-extended">&nbsp;</div>
        </div>
    </div>
    <!-- The table listing the files available for upload/download -->
    <table role="presentation" class="table table-striped"><tbody class="files"></tbody></table>

    <!-- Additional values to be posted with form-->
    @foreach (var postItem in Model.PostValuesWithUpload)
    {
        @Html.Hidden(postItem.Key, postItem.Value)
    }
</form>



<!--template and scripts-->
@if (Model.RenderSharedScript)
{
    // bootstrap templates

        <!-- The template to display files available for upload -->
    <script id="template-upload" type="text/x-tmpl">
        {% for (var i=0, file; file=o.files[i]; i++) { %}
        <tr class="template-upload fade">
            <td>
                <span class="preview"></span>
            </td>
            <td>
                <p class="name">{%=file.name%}</p>
                <strong class="error text-danger"></strong>
            </td>
            <td>
                <p class="size">Processing...</p>
                <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
            </td>
            <td>
                {% if (!i && !o.options.autoUpload) { %}
                <button class="btn btn-primary start" disabled>
                    <i class="glyphicon glyphicon-upload"></i>
                    <span>Start</span>
                </button>
                {% } %}
                {% if (!i) { %}
                <button class="btn btn-warning cancel">
                    <i class="glyphicon glyphicon-ban-circle"></i>
                    <span>Cancel</span>
                </button>
                {% } %}
            </td>
        </tr>
        {% } %}
    </script>

    <!-- The template to display files available for download -->
    <script id="template-download" type="text/x-tmpl">
            {% for (var i=0, file; file=o.files[i]; i++) { %}
            <tr class="template-download fade">
                <td> 
                    <span id="thumbnail" class="preview">
                        {% if (file.thumbnailUrl) { %}
                        @*<a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" data-gallery>*@
                        <img id="imgThumbnail" src="{%=file.thumbnailUrl%}" width="80" height="80">
                        @*</a>*@
                        {% } %}
                    </span>
                </td>
                <td>
                    <p class="name">
                        @*<span>{%=file.name%}</span>*@

                        {% if (file.url) { %}
                        <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" {%=file.thumbnailUrl?'data-gallery':''%}>{%=file.name%}</a>
                        {% } else { %}
                        <span>{%=file.name%}</span>
                        {% } %}
                    </p>
                    {% if (file.error) { %}
                    <div><span class="label label-danger">Error</span> {%=file.error%}</div>
                    {% } %}
                </td>
                @*<td>
                    <span class="size">{%=o.formatFileSize(file.size)%}</span>
                </td>*@
                <td>
                    {% if (file.deleteUrl) { %}
                    <button id="btnDelete" class="btn btn-danger delete" data-type="{%=file.deleteType%}" data-url="{%=file.deleteUrl%}" {% if (file.deleteWithCredentials) { %} data-xhr-fields='{"withCredentials":true}' {% } %}>
                        <i class="glyphicon glyphicon-trash"></i>
                        <span>Delete</span>
                    </button>
                    @*<input type="checkbox" name="delete" value="1" class="toggle">*@
                    {% } else { %}
                    <button class="btn btn-warning cancel">
                        <i class="glyphicon glyphicon-eye-close"></i>
                        <span>Close</span>
                    </button>
                    {% } %}
                </td>
            </tr>
            {% } %}   
      
        </script>


    <!-- Blueimp Jquery File Upload-->
    @Scripts.Render("/Scripts/mvcfileupload/blueimp/jquery.ui.widget.js")
    @Scripts.Render("/Scripts/mvcfileupload/blueimp/tmpl.min.js")

    <!-- The Load Image plugin is included for the preview images and image resizing functionality -->
    @Scripts.Render("/Scripts/mvcfileupload/blueimp/load-image.min.js")
    
    @Scripts.Render("/Scripts/mvcfileupload/blueimp/jquery.iframe-transport.js")
    @Scripts.Render("/Scripts/mvcfileupload/blueimp/jquery.fileupload.js")
    @Scripts.Render("/Scripts/mvcfileupload/blueimp/jquery.fileupload-process.js")
    @Scripts.Render("/Scripts/mvcfileupload/blueimp/jquery.fileupload-image.js")
    @Scripts.Render("/Scripts/mvcfileupload/blueimp/jquery.fileupload-validate.js")
    @Scripts.Render("/Scripts/mvcfileupload/blueimp/jquery.fileupload-ui.js")

    <!-- Blueimp styles / see blueimp docs for styling requirements for jquery ui -->
    @Styles.Render("/Content/mvcfileupload/blueimp/jquery.fileupload.css")
    @Styles.Render("/Content/mvcfileupload/blueimp/jquery.fileupload-ui.css")
        
    
}
<!--template and scripts end-->

<script type="text/javascript">

    // Initialize the jQuery File Upload widget:
    $('#@(formId)').fileupload({url: '@Model.UploadUrl'});
    
    $('#@(formId)').fileupload('option', {
        dropZone: $('#@(formId)'),
        maxFileSize: @Model.MaxFileSizeInBytes,
        maxNumberOfFiles: @maxNoOfFiles,
        disableImagePreview: @(Model.DisableImagePreview ? "true" : "false"),
        resizeMaxWidth: 160,
        resizeMaxHeight: 160,
        acceptFileTypes: @Model.FileTypes });

</script>